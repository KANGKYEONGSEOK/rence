<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test.com.rence.office">


	<!-- 리스트 전체 출력 - 최신순 정렬 -->
	<select id="SQL_SELECT_ALL_BACKOFFICE_SORT_DATE" resultType="test.com.rence.ListVO">
		select * from(
		    select left.backoffice_no, backoffice_type, company_name, roadname_address, backoffice_tag, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1) as backoffice_image, nvl(min_room_price, 0) as min_room_price, nvl(avg(rv.review_point), 0) as avg_rating from(
		        select b.backoffice_no, b.backoffice_type, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, min(r.room_price)as min_room_price
		        from backofficeinfo b left join roominfo r
		        on b.backoffice_no = r.backoffice_no
		        where b.backoffice_state = 'Y' group by b.backoffice_no, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, b.backoffice_type
		    )left left join review rv
		    on left.backoffice_no = rv.backoffice_no 
		    group by left.backoffice_no, company_name, roadname_address, backoffice_tag, backoffice_image, 
			min_room_price, nvl(min_room_price, 0), min_room_price, 0, min_room_price, 
			0, min_room_price, 0, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1), backoffice_image, 
			'[^,]+', 1, 1, backoffice_type
		)
		where backoffice_type like #{type}
		ORDER BY backoffice_no desc
	</select>

	<!-- 리스트 전체 출력 - 별점순 정렬 -->
	<select id="SQL_SELECT_ALL_BACKOFFICE_SORT_RATING" resultType="test.com.rence.ListVO">
		select * from(
		    select left.backoffice_no, left.backoffice_type, company_name, roadname_address, backoffice_tag, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1) as backoffice_image, nvl(min_room_price, 0) as min_room_price, nvl(avg(rv.review_point), 0) as avg_rating 
		    from(
		        select b.backoffice_no, b.backoffice_type,b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, min(r.room_price)as min_room_price
		        from backofficeinfo b left join roominfo r
		        on b.backoffice_no = r.backoffice_no
		        where b.backoffice_state = 'Y' group by b.backoffice_no, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, b.backoffice_type
		    )left left join review rv
		    on left.backoffice_no = rv.backoffice_no 
		    group by left.backoffice_no, company_name, roadname_address, backoffice_tag, backoffice_image, 
		    min_room_price, nvl(min_room_price, 0), min_room_price, 0, min_room_price, 
		    0, min_room_price, 0, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1), backoffice_image, 
		    '[^,]+', 1, 1, left.backoffice_type
		) total
		where total.backoffice_type like #{type}
		ORDER BY total.avg_rating desc, total.backoffice_no desc
	</select>

	<!-- 리스트 전체 출력 - 가격 낮은순 정렬 -->
	<select id="SQL_SELECT_ALL_BACKOFFICE_SORT_CHEAP" resultType="test.com.rence.ListVO">
		select * from(
		    select left.backoffice_no, left.backoffice_type, company_name, roadname_address, backoffice_tag, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1) as backoffice_image, nvl(min_room_price, 0) as min_room_price, nvl(avg(rv.review_point), 0) as avg_rating 
		    from(
		        select b.backoffice_no, b.backoffice_type,b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, min(r.room_price)as min_room_price
		        from backofficeinfo b left join roominfo r
		        on b.backoffice_no = r.backoffice_no
		        where b.backoffice_state = 'Y' group by b.backoffice_no, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, b.backoffice_type
		    )left left join review rv
		    on left.backoffice_no = rv.backoffice_no 
		    group by left.backoffice_no, company_name, roadname_address, backoffice_tag, backoffice_image, 
		    min_room_price, nvl(min_room_price, 0), min_room_price, 0, min_room_price, 
		    0, min_room_price, 0, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1), backoffice_image, 
		    '[^,]+', 1, 1, left.backoffice_type
		) total
		where total.backoffice_type like #{type}
		ORDER BY total.min_room_price, total.backoffice_no desc
	</select>

	<!-- 리스트 전체 출력 - 가격 높은순 정렬 -->
	<select id="SQL_SELECT_ALL_BACKOFFICE_SORT_EXPENSIVE" resultType="test.com.rence.ListVO">
		select * from(
		    select left.backoffice_no, left.backoffice_type, company_name, roadname_address, backoffice_tag, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1) as backoffice_image, nvl(min_room_price, 0) as min_room_price, nvl(avg(rv.review_point), 0) as avg_rating 
		    from(
		        select b.backoffice_no, b.backoffice_type,b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, min(r.room_price)as min_room_price
		        from backofficeinfo b left join roominfo r
		        on b.backoffice_no = r.backoffice_no
		        where b.backoffice_state = 'Y' group by b.backoffice_no, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, b.backoffice_type
		    )left left join review rv
		    on left.backoffice_no = rv.backoffice_no 
		    group by left.backoffice_no, company_name, roadname_address, backoffice_tag, backoffice_image, 
		    min_room_price, nvl(min_room_price, 0), min_room_price, 0, min_room_price, 
		    0, min_room_price, 0, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1), backoffice_image, 
		    '[^,]+', 1, 1, left.backoffice_type
		) total
		where total.backoffice_type like #{type}
		ORDER BY total.min_room_price desc, total.backoffice_no desc
	</select>


	
	
	<!-- 서치바 검색 - 최신순 정렬 -->
	<select id="SQL_SEARCHLIST_SORT_DATE" resultType="test.com.rence.ListVO">
		select * from(
		    select left.backoffice_no, left.backoffice_type, company_name, roadname_address, backoffice_tag, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1) as backoffice_image, nvl(min_room_price, 0) as min_room_price, nvl(avg(rv.review_point), 0) as avg_rating 
		    from(
		        select b.backoffice_no, b.backoffice_type,b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, min(r.room_price)as min_room_price
		        from backofficeinfo b left join roominfo r
		        on b.backoffice_no = r.backoffice_no
		        where b.backoffice_state = 'Y' group by b.backoffice_no, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, b.backoffice_type
		    )left left join review rv
		    on left.backoffice_no = rv.backoffice_no 
		    group by left.backoffice_no, company_name, roadname_address, backoffice_tag, backoffice_image, 
		    min_room_price, nvl(min_room_price, 0), min_room_price, 0, min_room_price, 
		    0, min_room_price, 0, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1), backoffice_image, 
		    '[^,]+', 1, 1, left.backoffice_type
		) total
		where total.backoffice_type like #{type} AND total.roadname_address like #{location} AND total.company_name like #{searchWord}
		ORDER BY total.backoffice_no desc
	</select>

	<!-- 서치바 검색 - 별점순 정렬 -->
	<select id="SQL_SEARCHLIST_SORT_RATING" resultType="test.com.rence.ListVO">
		select * from(
		    select left.backoffice_no, left.backoffice_type, company_name, roadname_address, backoffice_tag, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1) as backoffice_image, nvl(min_room_price, 0) as min_room_price, nvl(avg(rv.review_point), 0) as avg_rating 
		    from(
		        select b.backoffice_no, b.backoffice_type,b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, min(r.room_price)as min_room_price
		        from backofficeinfo b left join roominfo r
		        on b.backoffice_no = r.backoffice_no
		        where b.backoffice_state = 'Y' group by b.backoffice_no, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, b.backoffice_type
		    )left left join review rv
		    on left.backoffice_no = rv.backoffice_no 
		    group by left.backoffice_no, company_name, roadname_address, backoffice_tag, backoffice_image, 
		    min_room_price, nvl(min_room_price, 0), min_room_price, 0, min_room_price, 
		    0, min_room_price, 0, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1), backoffice_image, 
		    '[^,]+', 1, 1, left.backoffice_type
		) total
		where total.backoffice_type like #{type} AND total.roadname_address like #{location} AND total.company_name like #{searchWord}
		ORDER BY total.avg_rating desc, total.backoffice_no desc
	</select>

	<!-- 서치바 검색 - 가격 낮은순 정렬 -->
	<select id="SQL_SEARCHLIST_SORT_CHEAP" resultType="test.com.rence.ListVO">
		select * from(
		    select left.backoffice_no, left.backoffice_type, company_name, roadname_address, backoffice_tag, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1) as backoffice_image, nvl(min_room_price, 0) as min_room_price, nvl(avg(rv.review_point), 0) as avg_rating 
		    from(
		        select b.backoffice_no, b.backoffice_type,b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, min(r.room_price)as min_room_price
		        from backofficeinfo b left join roominfo r
		        on b.backoffice_no = r.backoffice_no
		        where b.backoffice_state = 'Y' group by b.backoffice_no, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, b.backoffice_type
		    )left left join review rv
		    on left.backoffice_no = rv.backoffice_no 
		    group by left.backoffice_no, company_name, roadname_address, backoffice_tag, backoffice_image, 
		    min_room_price, nvl(min_room_price, 0), min_room_price, 0, min_room_price, 
		    0, min_room_price, 0, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1), backoffice_image, 
		    '[^,]+', 1, 1, left.backoffice_type
		) total
		where total.backoffice_type like #{type} AND total.roadname_address like #{location} AND total.company_name like #{searchWord}
		ORDER BY total.min_room_price, total.backoffice_no desc
	</select>

	<!-- 서치바 검색 - 가격 높은순 정렬 -->
	<select id="SQL_SEARCHLIST_SORT_EXPENSIVE" resultType="test.com.rence.ListVO">
		select * from(
		    select left.backoffice_no, left.backoffice_type, company_name, roadname_address, backoffice_tag, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1) as backoffice_image, nvl(min_room_price, 0) as min_room_price, nvl(avg(rv.review_point), 0) as avg_rating 
		    from(
		        select b.backoffice_no, b.backoffice_type,b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, min(r.room_price)as min_room_price
		        from backofficeinfo b left join roominfo r
		        on b.backoffice_no = r.backoffice_no
		        where b.backoffice_state = 'Y' group by b.backoffice_no, b.company_name, b.roadname_address, b.backoffice_tag, b.backoffice_image, b.backoffice_type
		    )left left join review rv
		    on left.backoffice_no = rv.backoffice_no 
		    group by left.backoffice_no, company_name, roadname_address, backoffice_tag, backoffice_image, 
		    min_room_price, nvl(min_room_price, 0), min_room_price, 0, min_room_price, 
		    0, min_room_price, 0, REGEXP_SUBSTR(backoffice_image, '[^,]+', 1, 1), backoffice_image, 
		    '[^,]+', 1, 1, left.backoffice_type
		) total
		where total.backoffice_type like #{type} AND total.roadname_address like #{location} AND total.company_name like #{searchWord}
		ORDER BY total.min_room_price desc, total.backoffice_no desc
	</select>
	
	<!-- 공간 기본 정보 불러오기 -->
	<select id="SQL_SELECT_ONE_OFFICE_INFO" resultType="test.com.rence.office.model.OfficeInfoVO">
		select * from (
		    select 
		        bi.backoffice_no, 
		        bi.owner_name, bi.backoffice_id, bi.backoffice_name, bi.company_name, bi.backoffice_image,
		        bi.backoffice_type, bi.backoffice_tag, bi.backoffice_option, bi.backoffice_around,
		        bi.backoffice_tel, bi.backoffice_email, bi.backoffice_info,
		        bi.zipcode, bi.roadname_address, bi.number_address, bi.detail_address,
		        AVG(nvl(rv.review_point, 0)) avg_rating
		from backofficeinfo bi 
		left  join review rv
		on bi.backoffice_no = rv.backoffice_no 
		group by 
		    bi.backoffice_no, bi.owner_name, bi.backoffice_id, bi.backoffice_name, bi.company_name, 
		    bi.backoffice_image, bi.backoffice_type, bi.backoffice_tag, bi.backoffice_option, bi.backoffice_around, 
		    bi.backoffice_tel, bi.backoffice_email, bi.backoffice_info, bi.zipcode, bi.roadname_address, 
		    bi.number_address, bi.detail_address)
		where backoffice_no=#{backoffice_no}
	</select>

	<!-- 공간 운영 시간 -->
	<select id="SQL_SELECT_ONE_OPERATING_TIME" resultType="test.com.rence.office.model.OfficeOperatingTimeVO_date">
		select *
		from backofficeoperatingtime
		where backoffice_no=#{backoffice_no}
	</select>
	<select id="SQL_SELECT_ONE_OPERATING_TIME_STRING" resultType="test.com.rence.office.model.OfficeOperatingTimeVO">
		select *
		from backofficeoperatingtime
		where backoffice_no=#{backoffice_no}
	</select>
	
	<!-- 공간 예약 타입(예약 방) 불러오기 -->
	<select id="SQL_SELECT_ALL_ROOM_INFO" resultType="test.com.rence.office.model.OfficeRoomVO">
		select *
		from roominfo
		where backoffice_no=#{backoffice_no}
	</select>
	
	<!-- 공간 문의 불러오기 -->
	<select id="SQL_SELECT_ALL_COMMENTS_INFO" resultType="test.com.rence.office.model.OfficeCommentsVO">
		select * from (
		    select 
		        c.comment_no, c.mother_no, c.comment_content, c.comment_date, c.room_no, r.room_name,
		        c.backoffice_no, u.user_no, user_image, user_name
		    from comments  c
		    left join userinfo u
		    on c.user_no = u.user_no   
            left join roominfo r
            on c.room_no = r.room_no
		)
		where backoffice_no=#{backoffice_no}
	</select>
	
	<!-- 공간에 대해 질문한 내역 가져오기 -->
	<select id="SQL_SELECT_ALL_QUESTION_BACKOFFICE" resultType="test.com.rence.office.model.OfficeQuestionVO">
		select
		    c.comment_no, c.comment_content, c.comment_date, 
		    u.user_no, u.user_name, u.user_image,
		    r.room_no, r.room_name
		from backofficeinfo b right join comments c
		on c.backoffice_no = b.backoffice_no 
		left join roominfo r on c.room_no = r.room_no
        left join userinfo u on c.user_no = u.user_no
		where c.mother_no is null and backoffice_no=#{backoffice_no}
		order by c.comment_no desc
	</select>
	
	<!-- 공간 질문에 대한 답변 가져오기 -->
	<select id="SQL_SELECT_ONE_ANSWER_BACKOFFICE" resultType="test.com.rence.office.model.OfficeQuestionVO">
		select c.comment_no, b.company_name as backoffice_name, r.room_name, c.comment_content as answer_content, c.comment_date as answer_date
		from backofficeinfo b right join comments c
		on c.backoffice_no = b.backoffice_no 
		left join roominfo r on c.room_no = r.room_no
		where c.mother_no = #{mother_no}
	</select>
	
	<!-- 공간 후기 불러오기 -->
	<select id="SQL_SELECT_ALL_REVIEW_INFO" resultType="test.com.rence.office.model.OfficeReviewVO">
		select *
		from
			(select 
			    review_no, review_content, review_point, review_date, room_no,
			    backoffice_no, u.user_no, user_image, user_name
			from review rv
			left join userinfo u
			on rv.user_no = u.user_no)
		where backoffice_no=#{backoffice_no}
	</select>
	
	<!-- 해당 날짜와 공간에 맞는 모든 예약 정보 불러오기 -->
	<select id="SQL_CHECK_RESERVE" resultType="test.com.rence.office.model.OfficeReserveVO" parameterType="Map">
		select * 
		from reserveinfo
		where reserve_stime like #{sql_like_date} and (reserve_state='begin' or reserve_state='in_use' or reserve_state='false') and room_no=#{room_no}
	</select>
	
	<!-- 예약한 공간(방) 정보 불러오기 -->
	<select id="SQL_SELECT_ONE_ROOM_TYPE" resultType="test.com.rence.office.model.OfficeRoomVO">
		select *
		from roominfo
		where room_no=#{room_no}
	</select>
	
	<!-- 예약 정보 추가 -->
	<insert id="SQL_INSERT_RESERVE" parameterType="test.com.rence.office.model.OfficeReserveVO_date">
		insert into
		reserveinfo(reserve_no, reserve_stime, reserve_etime, reserve_sdate, reserve_edate, reserve_state, room_no, user_no, backoffice_no, room_type)
		values('RV'||seq_reserve.nextval, #{reserve_stime}, #{reserve_etime}, #{reserve_sdate}, #{reserve_edate}, 'false', #{room_no}, #{user_no}, #{backoffice_no}, #{room_type})
	</insert>
	
	<!-- 예약 확인 후 결제를 위한 reserve_no 불러오기 -->
	<select id="SQL_SELECT_ONE_RESERVE_NO" resultType="test.com.rence.office.model.OfficeReserveVO_date">
		select * from (
			select *
			from reserveinfo
			where user_no=#{user_no}
			order by reserve_no desc
		)
		where rownum=1
	</select>
	
	<!-- 결제 전, 최종 예약 정보 불러오기 -->
	<select id="SQL_SELECT_ONE_FINAL_RESERVE_INFO" resultType="test.com.rence.office.model.PaymentInfoVO">
		select * from (
		    select
		        rv.reserve_no, TO_CHAR(rv.reserve_stime, 'YYYY-MM-DD HH24:MI') as reserve_stime, TO_CHAR(rv.reserve_etime, 'YYYY-MM-DD HH24:MI') as reserve_etime, 
		        rv.room_no, rv.user_no, rv.backoffice_no,
		        r.room_name, r.room_type, r.room_price,
		        u.user_name, u.user_tel, u.user_email,
		        b.backoffice_image, b.company_name,
		        b.owner_name, b.roadname_address, b.detail_address, b.backoffice_tel, b.backoffice_email,
		        m.mileage_total
		    from reserveinfo rv
		    left join roominfo r
		    on rv.room_no = r.room_no
		    left join userinfo u
		    on rv.user_no = u.user_no
		    left join backofficeinfo b
		    on rv.backoffice_no = b.backoffice_no
		    left join mileage m
		    on u.user_no = m.user_no
		    order by m.mileage_total desc
		    )
		where reserve_no=#{reserve_no} and rownum=1
	</select>
	
	<!-- 결제 정보 insert -->
	<insert id="SQL_INSERT_PAYMENT" parameterType="test.com.rence.office.model.OfficePaymentVO">
		insert into
		paymentinfo(payment_no, payment_total, use_mileage, actual_payment, payment_state, payment_date, room_no, user_no, reserve_no, sales_state, backoffice_no, payment_method)
		values('P'||seq_payment.nextval, #{payment_total}, #{use_mileage}, #{actual_payment}, #{payment_state}, SYSDATE, #{room_no}, #{user_no}, #{reserve_no}, #{sales_state}, #{backoffice_no}, #{payment_method})
	</insert>
	
	<!-- 결제 성공 시 예약 상태 변경 -->
	<update id="SQL_UPDATE_RESERVE_STATE">
		update reserveinfo
		set reserve_state='begin'
		where reserve_no=#{reserve_no}
	</update>
	
	<!-- 결제 성공 시 payment_no 가져오기 -->
	<select id="SQL_SELECT_ONE_RECENT_PAYMENT" resultType="test.com.rence.office.model.OfficePaymentVO">
		select *
		from paymentinfo
		where user_no=#{user_no} and rownum=1
		order by payment_no desc
	</select>
	
	<!-- 사용자의 마일리지 가져오기 -->
	<select id="SQL_SELECT_ONE_RECENT_MILEAGE" resultType="test.com.rence.office.model.OfficeMileageVO">
		select *
		from mileage
		where user_no=#{user_no} and rownum=1
		order by mileage_no desc
	</select>
	
	<!-- 결제 성공 시 마일리지 사용 내역 변경 -->
	<insert id="SQL_INSERT_MILEAGE_CHANGED" parameterType="test.com.rence.office.model.OfficeMileageVO">
		insert into
		mileage(mileage_no, mileage_total, mileage_state, user_no, mileage_change, payment_no)
		values('M'||seq_mileage.nextval, #{mileage_total}, #{mileage_state}, #{user_no}, #{mileage_change}, #{payment_no})
	</insert>
</mapper>
