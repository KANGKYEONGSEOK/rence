<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test.com.rence.dashboard">
  	
  	<select id="SQL_SELECT_ALL_RESERVE_SUMMARY" resultType="test.com.rence.dashboard.model.ReserveSummaryVO">
    	select r.reserve_no, r.reserve_sdate, r.reserve_edate, rm.room_name, u.user_name, p.actual_payment, r.reserve_state 
    	from reserveinfo r left outer join roominfo rm on r.backoffice_no=rm.backoffice_no left outer join paymentinfo p on rm.room_no = p.room_no left outer join userinfo u on p.user_no=u.user_no 
		where r.backoffice_no=#{backoffice_no} and r.reserve_state!='false' 
		order by r.reserve_sdate
  	</select>

	<select id="SQL_SELECT_ALL_COMMENT_SUMMARY" resultType="test.com.rence.dashboard.model.CommentSummaryVO">
		select c.comment_no, rm.room_name, c.comment_date, c.comment_content
		from comments c left outer join roominfo rm on c.room_no=rm.room_no 
		where c.backoffice_no=#{backoffice_no} and c.user_no is not null
		order by c.comment_date desc
	</select>
  	
  	<select id="SQL_SELECT_ONE_PAYMENT_SUMMARY" resultType="test.com.rence.dashboard.model.SalesSettlementSummaryVO">
  		select * from sales_view where backoffice_no=#{backoffice_no}
  	</select>
  	
  	<select id="SQL_SELECT_ONE_ROOM_SUMMARY" resultType="test.com.rence.dashboard.model.RoomSummaryVO">
  		select (select round(avg(review_point),2) from review )review_point ,
			(select count(comment_no) from comments where user_no is not null)comment_no,
			(select count(review_no) from review )review_no,
			(select count(reserve_no) from reserveinfo )reserve_no
		from backofficeinfo where backoffice_no=#{backoffice_no}
  	</select>
  	
  	<select id="SQL_SELECT_ALL_B_RESERVE" resultType="test.com.rence.dashboard.model.ReserveVO" parameterType="hashmap">
  		select * from (
			select ROW_NUMBER() OVER(PARTITION BY rv.reserve_no ORDER BY rv.reserve_no ASC ) no, rv.reserve_no, rv.reserve_sdate, rv.reserve_edate, rm.room_name, u.user_name, u.user_tel, u.user_email, p.actual_payment, p.payment_state
			from reserveinfo rv left outer join roominfo rm on rv.room_no=rm.room_no 
			left outer join paymentinfo p on rm.room_no=p.room_no
			left outer join userinfo u on p.user_no=u.user_no 
			where rv.backoffice_no=#{backoffice_no} and rv.reserve_state !='false' 
		 
  		<if test="reserve_state == 'all'">
  			order by reserve_sdate desc
  		</if>
  		<if test="reserve_state == 'in_use'">
  			and (reserve_state ='begin' or reserve_state ='in_use') order by reserve_sdate desc
  		</if>
  		<if test="reserve_state == 'end'">
  			and reserve_state ='end' order by reserve_sdate desc
  		</if>
  		<if test="reserve_state == 'cancel'">
  			and reserve_state ='cancel' order by reserve_sdate desc
  		</if>
  		)A where A.no=1
  	</select>
  	
  	<select id="SQL_SELECT_ALL_B_RESERVE_SEARCH" resultType="test.com.rence.dashboard.model.ReserveVO" parameterType="hashmap">
  		select * from (
			select ROW_NUMBER() OVER(PARTITION BY rv.reserve_no ORDER BY rv.reserve_no ASC ) no, rv.reserve_no, rv.reserve_sdate, rv.reserve_edate, rm.room_name, u.user_name, u.user_tel, u.user_email, p.actual_payment, p.payment_state
			from reserveinfo rv left outer join roominfo rm on rv.room_no=rm.room_no 
			left outer join paymentinfo p on rm.room_no=p.room_no
			left outer join userinfo u on p.user_no=u.user_no 
			where rv.backoffice_no=#{backoffice_no} and rv.reserve_state !='false' and u.user_name like #{searchword} order by reserve_sdate asc )A
		where A.no=1
  	</select>
  	
  	<select id="SQL_SELECT_ONE_SALES" resultType="test.com.rence.dashboard.model.SalesSettlementPreVO">
  		select * from sales_one_view where backoffice_no=#{backoffice_no}
  		<if test="sales_date == 'day'">
  			and payment_date=sysdate
  		</if>
  		<if test="sales_date == 'week'">
  			and payment_date between add_months(sysdate,-1) and sysdate
  		</if>
  		<if test="sales_date == 'month'">
  			and payment_date between sysdate - interval '7' day and sysdate
  		</if>
  	</select>
  	
  	<select id="SQL_SELECT_ALL_SALES" resultType="test.com.rence.dashboard.model.SalesSettlementPreVO">
  		select reserve_sdate, reserve_edate, room_name, actual_payment, payment_state, sales_state from(
			select ROW_NUMBER() OVER(PARTITION BY rv.reserve_no ORDER BY rv.reserve_no ASC ) no, reserve_sdate, reserve_edate, room_name, actual_payment, payment_state, sales_state, rv.backoffice_no
			from reserveinfo rv left outer join paymentinfo p on rv.reserve_no=p.reserve_no
			left outer join roominfo rm on p.room_no=rm.room_no)A
		where A.no=1 and backoffice_no=#{backoffice_no} order by reserve_sdate desc
  	</select>
  	
  	
  	<update id="SQL_UPDATE_SALES_STATE_T" parameterType="test.com.rence.dashboard.model.SalesSettlementVO">
  		update paymentinfo set sales_state='T' where backoffice_no=#{backoffice_no} and room_no=#{room_no}
  	</update>
  	
  	<select id="SQL_SELECT_ALL_ROOM" resultType="test.com.rence.dashboard.model.RoomVO">
  		select * from roominfo where backoffice_no=#{backoffice_no} order by reserve_sdate desc
  	</select>
  	
  	<select id="SQL_SELECT_ONE_BACKOFFICE_INFO" resultType="test.com.rence.backoffice.BackOfficeVO">
  		select * from backofficeinfo where backoffice_no=#{backoffice_no}
  	</select>
  
 	<insert id="SQL_INSERT_ROOM" parameterType="test.com.rence.dashboard.model.RoomVO">
 		insert into roominfo(room_no,room_name,room_type,backoffice_no,room_price) values('RM'||seq_room.nextval,#{room_name},#{room_type},#{backoffice_no},
 		
  		<if test="room_type == 'desk'">
  			'10000')
  		</if>
  		<if test="room_type == 'meet_04'">
  			'20000')
  		</if>
  		<if test="room_type == 'meet_06'">
  			'30000')
  		</if>
  		<if test="room_type == 'meet_10'">
  			'50000')
  		</if>
  		<if test="room_type == 'office'">
  			#{room_price})
  		</if>
 	</insert>
 	
 	<update id="SQL_UPDATE_ROOM" parameterType="test.com.rence.dashboard.model.RoomVO">
 		update roominfo set room_name=#{room_name}, room_type=#{room_type}, room_price=
 		<if test="room_type == 'desk'">
  			'10000')
  		</if>
  		<if test="room_type == 'meet_04'">
  			'20000')
  		</if>
  		<if test="room_type == 'meet_06'">
  			'30000')
  		</if>
  		<if test="room_type == 'meet_10'">
  			'50000')
  		</if>
  		<if test="room_type == 'office'">
  			#{room_price})
  		</if>
  		where backoffice_no=#{backoffice_no} and room_no=#{room_no}
 	</update>
 	
 	<delete id="SQL_DELETE_ROOM" parameterType="hashmap">
 		DELETE FROM roominfo where backoffice_no=#{backoffice_no} and room_no=#{room_no}
 	</delete>
 	
 	<select id="SQL_SELECT_ALL_REVIEW" resultType="test.com.rence.dashboard.model.ReviewVO">
  		select review_no, review_content, review_point, review_date, user_image, substr(user_name,1,1)||lpad('*',length(user_name)-2,'*') 
		from(
			select ROW_NUMBER() OVER(PARTITION BY rv.review_no ORDER BY rv.review_no ASC ) no, review_no, review_content, review_point, review_date, user_image, user_name 
			from review rv left outer join userinfo u on rv.user_no=u.user_no
			where backoffice_no=#{backoffice_no})A
		where A.no=1 order by review_date desc
  	</select>
  	
  	<select id="SQL_SELECT_ONE_ROOM_INFO" resultType="test.com.rence.dashboard.model.RoomVO">
  		select * from roominfo where backoffice_no=#{backoffice_no} and room_no=#{room_no}
  	</select>
  	
</mapper>
