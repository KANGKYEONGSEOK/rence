<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test.com.rence.dashboard">
  	
  	<select id="SQL_SELECT_ALL_RESERVE_SUMMARY" resultType="test.com.rence.dashboard.model.ReserveSummaryVO">
  		<![CDATA[
    	select reserve_no, TO_CHAR(reserve_sdate, 'YYYY-MM-DD HH24:MI:SS') as reserve_sdate , TO_CHAR(reserve_edate, 'YYYY-MM-DD HH24:MI:SS') as reserve_edate, room_name, user_name, actual_payment, reserve_state  
		from (
			select ROW_NUMBER() OVER(PARTITION BY r.reserve_no ORDER BY r.reserve_no ASC ) no, r.reserve_no, r.reserve_sdate, r.reserve_edate, rm.room_name, u.user_name, p.actual_payment, r.reserve_state 
			from reserveinfo r left outer join userinfo u on r.user_no=u.user_no 
			left outer join paymentinfo p on u.user_no=p.user_no 
			left outer join backofficeinfo b on p.backoffice_no = b.backoffice_no 
			left outer join roominfo rm on b.backoffice_no = rm.backoffice_no
			where r.backoffice_no=#{backoffice_no} and r.reserve_state!='false')A
		where A.no=1 and ROWNUM <= 6
		order by reserve_sdate desc
		]]> 
  	</select>

	<select id="SQL_SELECT_ALL_COMMENT_SUMMARY" resultType="test.com.rence.dashboard.model.CommentSummaryVO">
		select c.comment_no, rm.room_name,TO_CHAR(c.comment_date, 'YYYY-MM-DD HH24:MI:SS') as comment_date, c.comment_content
		from comments c left outer join roominfo rm on c.room_no=rm.room_no 
		where c.backoffice_no=#{backoffice_no} and c.host_no is null and comment_no not in (select mother_no from comments where mother_no is not null)
	</select>
  	
  	<select id="SQL_SELECT_ONE_PAYMENT_SUMMARY" resultType="test.com.rence.dashboard.model.SalesSettlementSummaryVO">
  		<![CDATA[
  		select NVL(sum(sales_total),0) as sales_total, NVL(sum(sales_cancel),0) as sales_cancel from(

		select ROW_NUMBER() OVER(PARTITION BY backoffice_no ORDER BY backoffice_no ASC ) no, backoffice_no, (select NVL(sum(
		(select NVL(sum(p.payment_total),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='T' and ((rm.room_type='desk') or (rm.room_type like 'meeting%') and p.backoffice_no=#{backoffice_no}))+
		(select NVL(sum(p.payment_total*0.8),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='F' and p.sales_state='T' and ((rm.room_type='desk') or (rm.room_type like 'meeting%')and p.backoffice_no=#{backoffice_no}))+ 
		(select NVL(sum(payment_total),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.sales_state='T' and rm.room_type='office' and p.backoffice_no=#{backoffice_no})+
		(select NVL(sum(payment_total*0.2),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='F' and ((rm.room_type='desk') or (rm.room_type like 'meeting%'))and p.backoffice_no=#{backoffice_no}) 
 		),0) as sales_total from paymentinfo) as sales_total,

		(select NVL(sum(
		(select NVL(sum(payment_total),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where payment_state='T' and (sysdate-payment_date)*24<=1 and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		+(select NVL(sum(payment_total*0.2),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where payment_state='F' and ((sysdate-payment_date)*24<=1) and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		+(select NVL(sum(payment_total*0.8),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where ((sysdate-payment_date)*24>1) and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		),0) as sales_cancel from paymentinfo) as sales_cancel
		from paymentinfo where backoffice_no=#{backoffice_no} and trunc(payment_date)=trunc(sysdate))A 
		where A.no=1
		]]> 
  	</select>
  	
  	<select id="SQL_SELECT_ONE_ROOM_SUMMARY" resultType="test.com.rence.dashboard.model.RoomSummaryVO">
  		 select (select round(avg(review_point),2) from review where backoffice_no=#{backoffice_no})review_point ,
			(select count(comment_no) from comments where user_no is not null and backoffice_no=#{backoffice_no})comment_no,
			(select count(review_no) from review where backoffice_no=#{backoffice_no} )review_no,
			(select count(reserve_no) from reserveinfo where backoffice_no=#{backoffice_no})reserve_no
		from backofficeinfo where backoffice_no=#{backoffice_no}
  	</select>
  	
  	<select id="SQL_SELECT_ALL_B_RESERVE" resultType="test.com.rence.dashboard.model.ReserveVO" parameterType="hashmap">
  		select * from (
			select ROW_NUMBER() OVER(PARTITION BY rv.reserve_no ORDER BY rv.reserve_no ASC ) no, rv.reserve_no, TO_CHAR(reserve_sdate, 'YYYY-MM-DD HH24:MI:SS') as reserve_sdate, TO_CHAR(reserve_edate, 'YYYY-MM-DD HH24:MI:SS') as reserve_edate, rm.room_name, u.user_name, u.user_tel, u.user_email, p.actual_payment, p.payment_state, reserve_state
			from reserveinfo rv left outer join roominfo rm on rv.room_no=rm.room_no 
			left outer join paymentinfo p on rm.room_no=p.room_no
			left outer join userinfo u on p.user_no=u.user_no 
			where rv.backoffice_no=#{backoffice_no} and rv.reserve_state !='false' 
			
<!-- 			select reserve_sdate,reserve_edate,room_name,user_name,user_tel,user_email, actual_payment, payment_state from (
			select ROW_NUMBER() OVER(PARTITION BY rv.reserve_no ORDER BY rv.reserve_no ASC ) no, rv.reserve_no, TO_CHAR(reserve_sdate, 'YYYY-MM-DD HH24:MI:SS') as reserve_sdate, TO_CHAR(reserve_edate, 'YYYY-MM-DD HH24:MI:SS') as reserve_edate, rm.room_name, u.user_name, u.user_tel, u.user_email, p.actual_payment, p.payment_state
			from reserveinfo rv left outer join roominfo rm on rv.room_no=rm.room_no 
			left outer join paymentinfo p on rm.room_no=p.room_no
			left outer join userinfo u on p.user_no=u.user_no 
			where rv.backoffice_no=#{backoffice_no} and reserve_state !='false'  -->
		 
  		<if test="reserve_state == 'all'">
  			order by reserve_sdate desc
  		</if>
  		<if test="reserve_state == 'in_use'">
  			and (reserve_state ='begin' or reserve_state ='in_use') order by reserve_sdate desc
  		</if>
  		<if test="reserve_state == 'end'">
  			and reserve_state ='end' order by reserve_sdate desc
  		</if>
  		<if test="reserve_state == 'cancel'">
  			and reserve_state ='cancel' order by reserve_sdate desc
  		</if>
  		)A where A.no=1
  	</select>
  	
<!--     	<update id="SQL_UPDATE_B_RESERVE_STATE" parameterType="test.com.rence.dashboard.model.ReserveVO_date">
  		update reserveinfo set reserve_state = 
  		
  		<if test="now lt reserve_sdate">
  			'begin'
  		</if>
  		<if test="now between reserve_sdate and reserve_edate">
			'in_use'
		</if>
		<if test="now gt reserve_edate">
			'end'
		</if>
		and backoffice_no=#{backoffice_no}
  	</update> -->
  	
  	<select id="SQL_SELECT_ALL_B_RESERVE_SEARCH" resultType="test.com.rence.dashboard.model.ReserveVO" parameterType="hashmap">
  		select * from (
			select ROW_NUMBER() OVER(PARTITION BY rv.reserve_no ORDER BY rv.reserve_no ASC ) no, rv.reserve_no, TO_CHAR(reserve_sdate, 'YYYY-MM-DD HH24:MI:SS') as reserve_sdate, TO_CHAR(reserve_edate, 'YYYY-MM-DD HH24:MI:SS') as reserve_edate, rm.room_name, u.user_name, u.user_tel, u.user_email, p.actual_payment, p.payment_state, reserve_state
			from reserveinfo rv left outer join roominfo rm on rv.room_no=rm.room_no 
			left outer join paymentinfo p on rm.room_no=p.room_no
			left outer join userinfo u on p.user_no=u.user_no 
			where rv.backoffice_no=#{backoffice_no} and rv.reserve_state !='false' and u.user_name like #{searchword}
			<if test="reserve_state == 'all'">
  			order by reserve_sdate desc
  			</if>
  			<if test="reserve_state == 'in_use'">
  			and (reserve_state ='begin' or reserve_state ='in_use') order by reserve_sdate desc
  			</if>
  			<if test="reserve_state == 'end'">
  			and reserve_state ='end' order by reserve_sdate desc
  			</if>
  			<if test="reserve_state == 'cancel'">
  			and reserve_state ='cancel' order by reserve_sdate desc
  			</if>
			)A where A.no=1
  	</select>
  	
  	<select id="SQL_SELECT_ONE_SALES" resultType="test.com.rence.dashboard.model.SalesSettlementPreVO">
  		<![CDATA[
  		select NVL(sum(sales_total),0) as sales_total, NVL(sum(sales_cancel),0) as sales_cancel from(

		select ROW_NUMBER() OVER(PARTITION BY backoffice_no ORDER BY backoffice_no ASC ) no, backoffice_no, (select NVL(sum(
		(select NVL(sum(p.payment_total),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='T' and ((rm.room_type='desk') or (rm.room_type like 'meeting%') and p.backoffice_no=#{backoffice_no}))+
		(select NVL(sum(p.payment_total*0.8),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='F' and p.sales_state='T' and ((rm.room_type='desk') or (rm.room_type like 'meeting%')and p.backoffice_no=#{backoffice_no}))+ 
		(select NVL(sum(payment_total),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.sales_state='T' and rm.room_type='office' and p.backoffice_no=#{backoffice_no})+
		(select NVL(sum(payment_total*0.2),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='F' and ((rm.room_type='desk') or (rm.room_type like 'meeting%'))and p.backoffice_no=#{backoffice_no}) 
 		),0) as sales_total from paymentinfo) as sales_total,

		(select NVL(sum(
		(select NVL(sum(payment_total),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where payment_state='T' and (sysdate-payment_date)*24<=1 and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		+(select NVL(sum(payment_total*0.2),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where payment_state='F' and ((sysdate-payment_date)*24<=1) and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		+(select NVL(sum(payment_total*0.8),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where ((sysdate-payment_date)*24>1) and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		),0) as sales_cancel from paymentinfo) as sales_cancel
		from paymentinfo where backoffice_no=#{backoffice_no} 
		]]> 
  		<if test="sales_date == 'day'">
  			and trunc(payment_date)=trunc(SYSDATE)
  		</if>
  		<if test="sales_date == 'week'">
  			and trunc(payment_date) between trunc(SYSDATE) - interval '7' day and trunc(SYSDATE)
  		</if>
  		<if test="sales_date == 'month'">
  			and trunc(payment_date) between add_months(trunc(SYSDATE),-1) and trunc(SYSDATE)
  		</if>
  		)A 
		where A.no=1
		union
  		<![CDATA[
  		select NVL(sum(pre_sales_total),0) as pre_sales_total, NVL(sum(pre_sales_cancel),0) as pre_sales_cancel from(

		select ROW_NUMBER() OVER(PARTITION BY backoffice_no ORDER BY backoffice_no ASC ) no, backoffice_no, (select NVL(sum(
		(select NVL(sum(p.payment_total),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='T' and ((rm.room_type='desk') or (rm.room_type like 'meeting%') and p.backoffice_no=#{backoffice_no}))+
		(select NVL(sum(p.payment_total*0.8),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='F' and p.sales_state='T' and ((rm.room_type='desk') or (rm.room_type like 'meeting%')and p.backoffice_no=#{backoffice_no}))+ 
		(select NVL(sum(payment_total),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.sales_state='T' and rm.room_type='office' and p.backoffice_no=#{backoffice_no})+
		(select NVL(sum(payment_total*0.2),0) from paymentinfo p left outer join roominfo rm on p.room_no=rm.room_no where p.payment_state='F' and ((rm.room_type='desk') or (rm.room_type like 'meeting%'))and p.backoffice_no=#{backoffice_no}) 
 		),0) as pre_sales_total from paymentinfo) as pre_sales_total,

		(select NVL(sum(
		(select NVL(sum(payment_total),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where payment_state='T' and (sysdate-payment_date)*24<=1 and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		+(select NVL(sum(payment_total*0.2),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where payment_state='F' and ((sysdate-payment_date)*24<=1) and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		+(select NVL(sum(payment_total*0.8),0) from paymentinfo p left outer join reserveinfo rv on p.reserve_no=rv.reserve_no where ((sysdate-payment_date)*24>1) and rv.backoffice_no=#{backoffice_no} and rv.reserve_state='cancel')
		),0) as pre_sales_cancel from paymentinfo) as pre_sales_cancel
		from paymentinfo where backoffice_no=#{backoffice_no} 
		]]> 
  		<if test="sales_date == 'day'">
  			and trunc(payment_date)=trunc(SYSDATE)-1
  		</if>
  		<if test="sales_date == 'week'">
  			and trunc(payment_date) between trunc(SYSDATE) - interval '14' day and trunc(SYSDATE) - interval '7' day
  		</if>
  		<if test="sales_date == 'month'">
  			and trunc(payment_date) between add_months(trunc(SYSDATE),-2) and add_months(trunc(SYSDATE),-1)
  		</if>
  		)A 
		where A.no=1
  	</select>
  	
  	<select id="SQL_SELECT_ALL_SALES" resultType="test.com.rence.dashboard.model.SalesSettlementPreVO">
  		select TO_CHAR(reserve_sdate, 'YYYY-MM-DD HH24:MI:SS') as reserve_sdate, TO_CHAR(reserve_edate, 'YYYY-MM-DD HH24:MI:SS') as reserve_edate, room_name, actual_payment, payment_state, sales_state, payment_no, room_no 
        from(
			select ROW_NUMBER() OVER(PARTITION BY rv.reserve_no ORDER BY rv.reserve_no ASC ) no, reserve_sdate, reserve_edate, room_name, actual_payment, payment_state, sales_state, rv.backoffice_no, payment_no, rv.room_no
			from reserveinfo rv left outer join paymentinfo p on rv.reserve_no=p.reserve_no
			left outer join roominfo rm on p.room_no=rm.room_no)A
		where A.no=1 and backoffice_no=#{backoffice_no} order by reserve_sdate desc  	
	</select>
  	
  	<update id="SQL_UPDATE_SALES_STATE_T" parameterType="test.com.rence.dashboard.model.SalesSettlementVO">
  		update paymentinfo set sales_state='T' where backoffice_no=#{backoffice_no} and room_no=#{room_no} and payment_no=#{payment_no}
  	</update>
  	
  	<update id="SQL_UPDATE_MILEAGE_SUCCESS" parameterType="test.com.rence.user.model.UserMileageVO">
  		 update mileage set mileage_state= 'T' where mileage_no in (select mileage_no from paymentinfo where payment_no=#{payment_no} and payment_state='T' and mileage_state='W')
  	</update>
  	
  	<select id="SQL_SELECT_ALL_ROOM" resultType="test.com.rence.dashboard.model.RoomVO">
  		select * from roominfo where backoffice_no=#{backoffice_no} order by room_no asc
  	</select>
  	
  	<select id="SQL_SELECT_ONE_BACKOFFICE_INFO" resultType="test.com.rence.backoffice.BackOfficeVO">
  		select * from backofficeinfo where backoffice_no=#{backoffice_no}
  	</select>
  
 	<insert id="SQL_INSERT_ROOM" parameterType="test.com.rence.dashboard.model.RoomVO">
 		insert into roominfo(room_no,room_name,room_type,backoffice_no,room_price) values('RM'||seq_room.nextval,#{room_name},#{room_type},#{backoffice_no},
 		
  		<if test="room_type == 'desk'">
  			10000)
  		</if>
  		<if test="room_type == 'meeting_04'">
  			20000)
  		</if>
  		<if test="room_type == 'meeting_06'">
  			30000)
  		</if>
  		<if test="room_type == 'meeting_10'">
  			50000)
  		</if>
  		<if test="room_type == 'office'">
  			#{room_price})
  		</if>
 	</insert>
 	
 	<update id="SQL_UPDATE_ROOM" parameterType="test.com.rence.dashboard.model.RoomVO">
 		update roominfo set room_name=#{room_name}, room_type=#{room_type}, room_price=
 		<if test="room_type == 'desk'">
  			10000
  		</if>
  		<if test="room_type == 'meeting_04'">
  			20000
  		</if>
  		<if test="room_type == 'meeting_06'">
  			30000
  		</if>
  		<if test="room_type == 'meeting_10'">
  			50000
  		</if>
  		<if test="room_type == 'office'">
  			#{room_price}
  		</if>
  		where backoffice_no=#{backoffice_no} and room_no=#{room_no}
 	</update>
 	
 	<delete id="SQL_DELETE_ROOM" parameterType="hashmap">
 		DELETE FROM roominfo where backoffice_no=#{backoffice_no} and room_no=#{room_no} and room_no not in (select room_no from reserveinfo where backoffice_no=#{backoffice_no} and room_no=#{room_no} and (reserve_state='begin' or reserve_state='in_use'))
 	</delete>
 	
 	<select id="SQL_SELECT_ALL_REVIEW_LIST" resultType="test.com.rence.dashboard.model.ReviewVO">
  		select review_no, review_content, review_point, TO_CHAR(review_date, 'YYYY-MM-DD HH24:MI:SS') as review_date, user_image, substr(user_name,1,1)||lpad('*',length(user_name)-2,'*') 
		from(
			select ROW_NUMBER() OVER(PARTITION BY rv.review_no ORDER BY rv.review_no ASC ) no, review_no, review_content, review_point, review_date, user_image, user_name 
			from review rv left outer join userinfo u on rv.user_no=u.user_no
			where backoffice_no=#{backoffice_no})A
		where A.no=1 order by review_date desc
  	</select>
  	
  	<select id="SQL_SELECT_ONE_ROOM_INFO" resultType="test.com.rence.dashboard.model.RoomVO">
  		select * from roominfo where backoffice_no=#{backoffice_no} and room_no=#{room_no}
  	</select>
  	
  	<select id="SQL_SELECT_ALL_Q" resultType="test.com.rence.dashboard.model.CommentListVO">
  		select comment_no, user_no, comment_content, TO_CHAR(comment_date, 'YYYY-MM-DD HH24:MI:SS') as comment_date, room_name, comment_state, c.room_no
		from comments c left outer join roominfo rm on c.room_no=rm.room_no
		where c.backoffice_no=#{backoffice_no} and mother_no is null
  	</select>
  	
  	<select id="SQL_SELECT_ALL_A" resultType="test.com.rence.dashboard.model.CommentListVO">
  		select comment_no, comment_content, TO_CHAR(comment_date, 'YYYY-MM-DD HH24:MI:SS') as comment_date
		from comments where backoffice_no=#{backoffice_no} and mother_no=#{mother_no}
  	</select>
  	
  	<select id="SQL_SELECT_ONE_COMMENT_INFO" resultType="test.com.rence.dashboard.model.CommentVO">
  		select comment_no,mother_no,comment_state,room_name,comment_content, TO_CHAR(comment_date, 'YYYY-MM-DD HH24:MI:SS') as comment_date, c.room_no,
        c.backoffice_no, user_no, host_no, writer  from comments c left outer join roominfo rm on c.room_no=rm.room_no where c.backoffice_no=#{backoffice_no} and c.room_no=#{room_no} and comment_no=#{comment_no}
  	</select>
  	
  	<insert id="SQL_INSERT_QNA" parameterType="test.com.rence.dashboard.model.CommentVO">
 		insert into comments(comment_no, room_no, backoffice_no, mother_no, comment_content, comment_date, writer, comment_state, host_no) 
		values ('C'||seq_comments.nextval,#{room_no},#{backoffice_no},#{mother_no},#{comment_content}, sysdate, '관리자', 'T', #{backoffice_no})
 	</insert>
  	
  	<delete id="SQL_DELETE_QNA_A" parameterType="hashmap">
 		DELETE FROM comments where backoffice_no=#{backoffice_no} and comment_no=#{comment_no}
 	</delete>
 	
 	<update id="SQL_UPDATE_Q_STATE_T" parameterType="test.com.rence.dashboard.model.CommentVO">
  		update comments set comment_state='T' where backoffice_no=#{backoffice_no} and comment_no=#{mother_no}
  	</update>
  	
 	<update id="SQL_UPDATE_Q_STATE_F" parameterType="test.com.rence.dashboard.model.CommentVO">
  		update comments set comment_state='F' where backoffice_no=#{backoffice_no} and comment_no=#{mother_no}
  	</update>
  	
  	
</mapper>
