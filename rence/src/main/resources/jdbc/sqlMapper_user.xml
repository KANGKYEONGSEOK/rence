<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test.com.rence.user.model">
	<!-- 회원가입처리 SQL -->
	<insert id="SQL_INSERT"
		parameterType="test.com.rence.user.model.UserVO">
		insert into
		userinfo(user_no,user_id,user_pw,user_name,user_email,user_tel,user_birth,user_state)
		values('U'||seq_user.nextval,#{user_id},#{user_pw},#{user_name},#{user_email},#{user_tel},#{user_birth},'Y')
	</insert>
	<!-- TO_DATE('#{user_birth}','YYYYMMDD') -->



<!-- 	회원가입이후 마일리지테이블에 유저번호를 저장하기 위해서 정보추출 -->
	<select id="SQL_USER_USERNO"
		resultType="test.com.rence.user.model.UserVO">
		select user_no
		from(
		select user_no from userinfo order by user_no desc
		)
		WHERE ROWNUM between 1 and 1
	</select>


	<!-- 회원가입시 마일리지 테이블에 회원가입한 회원 마일리지 0삽입 -->
	<insert id="SQL_INSERT_MILEAGE_ZERO_INSERT"
		parameterType="test.com.rence.user.model.UserVO">
		insert into
		mileage(mileage_no,mileage_total,mileage_change,mileage_state,user_no)
		values('M'||seq_mileage.nextval,0,0,'T',#{user_no})
	</insert>



	<!-- 회원가입시 인증번호 전송후 테이블에 저장 -->
	<insert id="SQL_INSERT_USER_AUTH"
		parameterType="test.com.rence.sendemail.AuthVO">
		INSERT INTO auth(auth_no, user_email, auth_code)
		values('A'||seq_auth.nextval, #{user_email}, #{auth_code})
	</insert>

	<!-- 인증번호 확인 완료 시 테이블에서 삭제 -->
	<delete id="SQL_AUTH_DELETE" parameterType="hashmap">
		delete from auth
		where auth_code=#{email_code} and user_email=#{user_email}
	</delete>

	<!-- 인증테이블에 사용자 이메일이 들어갔는지 체크하고 이메일 가져오는 용도 -->
	<!-- avo2 = auth 테이블에 정보 저장 후, select -->
	<!-- 회원가입도중에 이메일전송까지 하고 어떠한 상황에 의해 데이터만 들어가게 되면 인증번호가 두개가 되어 인증이 안되는 -->
	<!-- 버그발생 -> 이메일 중복시 최신 데이터 한개만 추출 -->

	<select id="SQL_SELECT_USER_AUTH"
		resultType="test.com.rence.sendemail.AuthVO">
		SELECT * FROM
		(SELECT user_email,auth_code,auth_no
		FROM auth
		WHERE
		user_email=#{user_email}
		ORDER BY AUTH_STIME DESC)
		WHERE <![CDATA[ROWNUM <= 1]]>
	</select>


	<!-- 회원가입시 인증번호 동일한지 체크 -->
<!-- 	과거 인증코드는 인증이 안되도록 함 -->
	<select id="SQL_SELECT_USER_AUTHOK" parameterType="hashmap"
		resultType="test.com.rence.sendemail.AuthVO">
		 SELECT * FROM
       ( SELECT * FROM
		(SELECT user_email,auth_code,auth_no
		FROM auth
		WHERE user_email=#{user_email}
        ORDER BY AUTH_STIME DESC)
		where (ROWNUM between 1 and 1))
        where auth_code=#{email_code}
	</select>
	<!-- SELECT * from auth where auth_code=#{email_code} and -->
	<!-- user_email=#{user_email} -->

	<!-- Email 중복체크 SQL -->
	<select id="SQL_EMAIL_CHECK"
		resultType="test.com.rence.user.model.UserVO">
		select * from
		userinfo where user_email=#{user_email}
	</select>

	<!-- 인증번호 보내고 DB저장 SQL -->
	<!-- 인증번호 확인 SQL -->

	<!-- 아이디 중복체크 SQL -->
	<select id="SQL_ID_CHECK"
		resultType="test.com.rence.user.model.UserVO">
		select * from
		userinfo where user_id=#{user_id}
	</select>


	<!-- 유저로그인 -->
	<select id="SQL_USER_LOGIN"
		resultType="test.com.rence.user.model.UserVO">
		select * from
		userinfo where user_id=#{user_id} and
		user_pw=#{user_pw}
	</select>

	<!-- 아이디 찾기에서 이메일 가져오기 -->
	<select id="SQL_SELECT_EMAIL"
		resultType="test.com.rence.user.model.UserVO">
		select * from userinfo where user_email=#{user_email}
	</select>


	<!-- 비밀번호 찾기를 위한 아이디 이메일 -->
	<!-- and 연산자를 통해서 아이디와 이메일 모두가 존재하여야 select가 가능함 -->
	<select id="SQL_SELECT_USER_ID_EMAIL"
		resultType="test.com.rence.user.model.UserVO">
		select * from userinfo where user_id=#{user_id} and
		user_email=#{user_email}
	</select>

	<!-- 비밀번호 난수로 초기화 -->
	<!-- 암호화처리가 된 비밀번호로 저장 -->
	<update id="SQL_USER_UPDATE_PW_INIT"
		parameterType="test.com.rence.user.model.UserVO">
		update userinfo set user_pw=#{user_pw}where
		user_id=#{user_id}
	</update>

	<!-- 비밀번호 변경을 위한 현재 비밀번호 확인 -->
	<select id="SQL_SELECT_PW" resultType="int">
		select count(*) from
		userinfo where user_no=#{user_no} and user_pw=#{user_pw}
	</select>

	<!-- 비밀번호 수정 -->
	<update id="SQL_USER_UPDATE_PW"
		parameterType="test.com.rence.user.model.UserVO">
		update userinfo set user_pw=#{user_pw} where
		user_no=#{user_no}
	</update>

	<!-- 프로필이미지 수정 -->
	<update id="SQL_USER_UPDATE_IMG"
		parameterType="test.com.rence.user.model.UserVO">
		update userinfo set user_image=#{user_image}where
		user_no=#{user_no}
	</update>

	<!-- 회원탈퇴에 따른 회원상태 수정 -->
	<!-- 회원인 상태에서는 user_state가 'Y' but, 회원탈퇴시 user_state 'N'으로 변경 -->
	<update id="SQL_USER_SECEDE"
		parameterType="test.com.rence.user.model.UserVO">
		update userinfo set user_state='N' where
		user_no=#{user_no}
	</update>

	<!-- 마이페이지에 정보 주기위해 정보가져오기 -->
	<!-- userinfo 테이블과 mileage 테이블조인 -->
	<!-- <select id="SQL_SELECT_USER_MYPAGE" -->
	<!-- resultType="test.com.rence.user.model.UserMypageVO"> -->
	<!-- SELECT u.user_no, u.user_name, u.user_image, u.user_id, -->
	<!-- u.user_email, u.user_tel, u.user_birth, m.mileage_total -->
	<!-- FROM userinfo u join mileage m -->
	<!-- on u.user_no = m.user_no -->
	<!-- where u.user_no = #{user_no} -->
	<!-- </select> -->

	<!-- 마이페이지에 정보 주기위해 정보가져오기 -->
	<!-- userinfo 테이블과 mileage 테이블조인한 뷰(user_mypage_view)를 사용하는 쿼리 -->
	<!-- 	마일리지 테이블에서 사용자의 고유번호로 조회를 하면 마일리지 리스트가 select되는데, 그중에 가격이 가장 높은 튜플 하나만 select -->
	<select id="SQL_SELECT_USER_MYPAGE"
		resultType="test.com.rence.user.model.UserMypageVO">
	select *
		from(
		select * 
		from user_mypage_view 
		where user_no=#{user_no}
		order by mileage_no desc
		)
		WHERE ROWNUM between 1 and 1
	</select>
	
<!-- 		select * from user_mypage_view where user_no=#{user_no} -->

<!-- 	마일리지상세페이지에 총마일리지 정보제공 -->
	<select id="SQL_SELECTONE_USER_MILEAGE"
		resultType="test.com.rence.user.model.UserMileageVO">
		select *
		from(
		select * 
		from mileage 
		where user_no=#{user_no}
		order by mileage_no desc
		)
		WHERE ROWNUM between 1 and 1
	</select>

	<!-- 	마일리지 상세페이지에서 적립 또는 사용한 내역만 보고 싶을때 -->
	<select id="SQL_USER_MILEAGE_SEARCH_LIST"
		resultType="test.com.rence.user.model.UserMileageVO" parameterType="hashmap">
		select * from user_detail_mileage_view
		<if test="searchKey == 'all'">
				where user_no=#{user_no} order by no desc
		</if>
		<if test="searchKey == 'plus'">
			 where user_no=#{user_no} and state='T'
			 order by no desc
		</if>
		<if test="searchKey == 'minus'">
			 where user_no=#{user_no} and state='F'
			 order by no desc
		</if>
	</select>



	<!-- 마일리지상세 페이지에 정보 주기위해 정보가져오기 -->
	<!-- user_detail_mileage_view 를 사용하는 쿼리 -->
	<select id="SQL_SELECTALL_USER_MILEAGE"
		resultType="test.com.rence.user.model.UserMileageVO" parameterType="hashmap">
		select * from user_detail_mileage_view 
		where user_no=#{user_no} order by no desc
	</select>
	
	






</mapper>
