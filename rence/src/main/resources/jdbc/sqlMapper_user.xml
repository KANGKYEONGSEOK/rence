<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test.com.rence.user">
	<!-- 회원가입처리 SQL -->
	<insert id="SQL_INSERT"
		parameterType="test.com.rence.user.UserVO">
		insert into
		userinfo(user_no,user_id,user_pw,user_name,user_email,user_tel,user_birth,user_state,auth_no)
		values('U'||seq_user.nextval,
		#{user_id},#{user_pw},#{user_name},#{user_email},#{user_tel},#{user_birth},'Y','A1001')
	</insert>
	<!-- TO_DATE('#{user_birth}','YYYYMMDD') -->



	<!-- Email 중복체크 SQL -->
	<select id="SQL_EMAIL_CHECK"
		resultType="test.com.rence.user.UserVO">
		select * from
		userinfo where user_email=#{user_email}
	</select>

	<!-- 인증번호 보내고 DB저장 SQL -->
	<!-- 인증번호 확인 SQL -->

	<!-- 아이디 중복체크 SQL -->
	<select id="SQL_ID_CHECK"
		resultType="test.com.rence.user.UserVO">
		select * from
		userinfo where user_id=#{user_id}
	</select>


	<!-- 유저로그인 -->
	<select id="SQL_USER_LOGIN"
		resultType="test.com.rence.user.UserVO">
		select * from
		userinfo where user_id=#{user_id} and
		user_pw=#{user_pw}
	</select>

	<!-- 아이디 찾기에서 이메일 가져오기 -->
	<select id="SQL_SELECT_EMAIL"
		resultType="test.com.rence.user.UserVO">
		select * from userinfo where user_email=#{user_email}
	</select>


	<!-- 비밀번호 찾기를 위한 아이디 이메일 -->
	<!-- and 연산자를 통해서 아이디와 이메일 모두가 존재하여야 select가 가능함 -->
	<select id="SQL_SELECT_USER_ID_EMAIL"
		resultType="test.com.rence.user.UserVO">
		select * from userinfo where user_id=#{user_id} and
		user_email=#{user_email}
	</select>

	<!-- 비밀번호 난수로 초기화 -->
	<update id="SQL_USER_UPDATE_PW_INIT"
		parameterType="test.com.rence.user.UserVO">
		update userinfo set user_pw=#{user_pw}where
		user_id=#{user_id}
	</update>

	<!-- 비밀번호 변경을 위한 현재 비밀번호 확인 -->
	<select id="SQL_SELECT_PW" resultType="int">
		select count(*) from
		userinfo where user_no=#{user_no} and user_pw=#{user_pw}
	</select>

	<!-- 비밀번호 수정 -->
	<update id="SQL_USER_UPDATE_PW"
		parameterType="test.com.rence.user.UserVO">
		update userinfo set user_pw=#{user_pw} where user_no=#{user_no}
	</update>

	<!-- 프로필이미지 수정 -->
	<update id="SQL_USER_UPDATE_IMG"
		parameterType="test.com.rence.user.UserVO">
		update userinfo set user_image=#{user_image}where
		user_no=#{user_no}
	</update>

	<!-- 회원탈퇴에 따른 회원상태 수정 -->
	<!-- 회원인 상태에서는 user_state가 'Y' but, 회원탈퇴시 user_state 'N'으로 변경 -->
	<update id="SQL_USER_SECEDE"
		parameterType="test.com.rence.user.UserVO">
		update userinfo set user_state='N' where
		user_no=#{user_no}
	</update>

	<!-- 마이페이지에 정보 주기위해 정보가져오기 -->
	<select id="SQL_SELECT_USER_MYPAGE"
		resultType="test.com.rence.user.UserMypageVO">
		select * from user_mypage_view where user_no=#{user_no}
	</select>

	<!-- 회원가입시 인증번호 전송후 테이블에 저장 -->
	<insert id="SQL_INSERT_USER_AUTH"
		parameterType="test.com.rence.sendemail.AuthVO">
		INSERT INTO auth(auth_no, user_email, auth_code)
		values('A'||seq_auth.nextval, #{user_email}, #{auth_code})
	</insert>

	<!-- 인증번호 확인 완료 시 테이블에서 삭제 -->
	<delete id="SQL_AUTH_DELETE" parameterType="hashmap">
		delete from auth
		where auth_code=#{email_code} and user_email=#{user_email}
	</delete>

	<!-- 인증테이블에 사용자 이메일이 들어갔는지 체크하고 이메일 가져오는 용도 -->
	<!-- avo2 = auth 테이블에 정보 저장 후, select -->
	<select id="SQL_SELECT_USER_AUTH"
		resultType="test.com.rence.sendemail.AuthVO">
		SELECT auth_no, auth_code, user_email from auth where
		user_email=#{user_email}
	</select>


	<!-- 회원가입시 인증번호 동일한지 체크 -->
	<select id="SQL_SELECT_USER_AUTHOK" parameterType="hashmap"
		resultType="test.com.rence.sendemail.AuthVO">
		SELECT * from auth where auth_code=#{email_code} and
		user_email=#{user_email}
	</select>

</mapper>
